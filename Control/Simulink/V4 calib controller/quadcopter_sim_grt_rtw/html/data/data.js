var dataJson = {"arch":{"ispc":true,"isunix":false,"ismac":false},"build":"quadcopter_sim","ref":false,"files":[{"name":"quadcopter_sim.c","type":"source","group":"model","path":"C:\\Users\\Artis\\Desktop\\Ladybug\\Simulink\\V4 calib controller\\quadcopter_sim_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * quadcopter_sim.c\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"quadcopter_sim\".\r\n *\r\n * Model version              : 2.35\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Fri May 19 10:25:36 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#include \"quadcopter_sim.h\"\r\n#include \"rtwtypes.h\"\r\n#include \"quadcopter_sim_private.h\"\r\n\r\n/* Block signals (default storage) */\r\nB_quadcopter_sim_T quadcopter_sim_B;\r\n\r\n/* Continuous states */\r\nX_quadcopter_sim_T quadcopter_sim_X;\r\n\r\n/* Real-time model */\r\nstatic RT_MODEL_quadcopter_sim_T quadcopter_sim_M_;\r\nRT_MODEL_quadcopter_sim_T *const quadcopter_sim_M = &quadcopter_sim_M_;\r\n\r\n/*\r\n * This function updates continuous states using the ODE3 fixed-step\r\n * solver algorithm\r\n */\r\nstatic void rt_ertODEUpdateContinuousStates(RTWSolverInfo *si )\r\n{\r\n  /* Solver Matrices */\r\n  static const real_T rt_ODE3_A[3] = {\r\n    1.0/2.0, 3.0/4.0, 1.0\r\n  };\r\n\r\n  static const real_T rt_ODE3_B[3][3] = {\r\n    { 1.0/2.0, 0.0, 0.0 },\r\n\r\n    { 0.0, 3.0/4.0, 0.0 },\r\n\r\n    { 2.0/9.0, 1.0/3.0, 4.0/9.0 }\r\n  };\r\n\r\n  time_T t = rtsiGetT(si);\r\n  time_T tnew = rtsiGetSolverStopTime(si);\r\n  time_T h = rtsiGetStepSize(si);\r\n  real_T *x = rtsiGetContStates(si);\r\n  ODE3_IntgData *id = (ODE3_IntgData *)rtsiGetSolverData(si);\r\n  real_T *y = id->y;\r\n  real_T *f0 = id->f[0];\r\n  real_T *f1 = id->f[1];\r\n  real_T *f2 = id->f[2];\r\n  real_T hB[3];\r\n  int_T i;\r\n  int_T nXc = 8;\r\n  rtsiSetSimTimeStep(si,MINOR_TIME_STEP);\r\n\r\n  /* Save the state values at time t in y, we'll use x as ynew. */\r\n  (void) memcpy(y, x,\r\n                (uint_T)nXc*sizeof(real_T));\r\n\r\n  /* Assumes that rtsiSetT and ModelOutputs are up-to-date */\r\n  /* f0 = f(t,y) */\r\n  rtsiSetdX(si, f0);\r\n  quadcopter_sim_derivatives();\r\n\r\n  /* f(:,2) = feval(odefile, t + hA(1), y + f*hB(:,1), args(:)(*)); */\r\n  hB[0] = h * rt_ODE3_B[0][0];\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[0]);\r\n  rtsiSetdX(si, f1);\r\n  quadcopter_sim_step();\r\n  quadcopter_sim_derivatives();\r\n\r\n  /* f(:,3) = feval(odefile, t + hA(2), y + f*hB(:,2), args(:)(*)); */\r\n  for (i = 0; i <= 1; i++) {\r\n    hB[i] = h * rt_ODE3_B[1][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1]);\r\n  }\r\n\r\n  rtsiSetT(si, t + h*rt_ODE3_A[1]);\r\n  rtsiSetdX(si, f2);\r\n  quadcopter_sim_step();\r\n  quadcopter_sim_derivatives();\r\n\r\n  /* tnew = t + hA(3);\r\n     ynew = y + f*hB(:,3); */\r\n  for (i = 0; i <= 2; i++) {\r\n    hB[i] = h * rt_ODE3_B[2][i];\r\n  }\r\n\r\n  for (i = 0; i < nXc; i++) {\r\n    x[i] = y[i] + (f0[i]*hB[0] + f1[i]*hB[1] + f2[i]*hB[2]);\r\n  }\r\n\r\n  rtsiSetT(si, tnew);\r\n  rtsiSetSimTimeStep(si,MAJOR_TIME_STEP);\r\n}\r\n\r\n/* Model step function */\r\nvoid quadcopter_sim_step(void)\r\n{\r\n  /* local block i/o variables */\r\n  real_T rtb_Saturation;\r\n  real_T rtb_Saturation1;\r\n  real_T rtb_Saturation2;\r\n  real_T rtb_Saturation3;\r\n  real_T rtb_Add3;\r\n  real_T rtb_Divide1;\r\n  real_T rtb_Divide2;\r\n  real_T rtb_Divide3;\r\n  real_T u0;\r\n  real_T u0_tmp;\r\n  if (rtmIsMajorTimeStep(quadcopter_sim_M)) {\r\n    /* set solver stop time */\r\n    rtsiSetSolverStopTime(&quadcopter_sim_M->solverInfo,\r\n                          ((quadcopter_sim_M->Timing.clockTick0+1)*\r\n      quadcopter_sim_M->Timing.stepSize0));\r\n  }                                    /* end MajorTimeStep */\r\n\r\n  /* Update absolute time of base rate at minor time step */\r\n  if (rtmIsMinorTimeStep(quadcopter_sim_M)) {\r\n    quadcopter_sim_M->Timing.t[0] = rtsiGetT(&quadcopter_sim_M->solverInfo);\r\n  }\r\n\r\n  /* Gain: '<S42>/Filter Coefficient' incorporates:\r\n   *  Integrator: '<S34>/Filter'\r\n   *  Sum: '<S34>/SumD'\r\n   */\r\n  quadcopter_sim_B.FilterCoefficient = (-0.42374999999999996 -\r\n    quadcopter_sim_X.Filter_CSTATE) * 100.0;\r\n\r\n  /* Product: '<S1>/Divide4' incorporates:\r\n   *  Integrator: '<S39>/Integrator'\r\n   *  Sum: '<S48>/Sum'\r\n   */\r\n  rtb_Add3 = ((quadcopter_sim_X.Integrator_CSTATE - 1.53) +\r\n              quadcopter_sim_B.FilterCoefficient) / -0.00016;\r\n\r\n  /* Gain: '<S90>/Filter Coefficient' incorporates:\r\n   *  Integrator: '<S82>/Filter'\r\n   *  Sum: '<S82>/SumD'\r\n   */\r\n  quadcopter_sim_B.FilterCoefficient_k = (-0.0 -\r\n    quadcopter_sim_X.Filter_CSTATE_h) * 1008.51334195282;\r\n\r\n  /* Product: '<S1>/Divide3' incorporates:\r\n   *  Integrator: '<S87>/Integrator'\r\n   *  Sum: '<S96>/Sum'\r\n   */\r\n  rtb_Divide3 = (quadcopter_sim_X.Integrator_CSTATE_g +\r\n                 quadcopter_sim_B.FilterCoefficient_k) / 6.5619509294111619E-6;\r\n\r\n  /* Gain: '<S138>/Filter Coefficient' incorporates:\r\n   *  Integrator: '<S130>/Filter'\r\n   *  Sum: '<S130>/SumD'\r\n   */\r\n  quadcopter_sim_B.FilterCoefficient_e = (-0.0 -\r\n    quadcopter_sim_X.Filter_CSTATE_hc) * 1008.51334195282;\r\n\r\n  /* Product: '<S1>/Divide2' incorporates:\r\n   *  Integrator: '<S135>/Integrator'\r\n   *  Sum: '<S144>/Sum'\r\n   */\r\n  rtb_Divide2 = (quadcopter_sim_X.Integrator_CSTATE_o +\r\n                 quadcopter_sim_B.FilterCoefficient_e) / 6.5619509294111619E-6;\r\n\r\n  /* Gain: '<S186>/Filter Coefficient' incorporates:\r\n   *  Integrator: '<S178>/Filter'\r\n   *  Sum: '<S178>/SumD'\r\n   */\r\n  quadcopter_sim_B.FilterCoefficient_m = (0.0 - quadcopter_sim_X.Filter_CSTATE_f)\r\n    * 100.0;\r\n\r\n  /* Product: '<S1>/Divide1' incorporates:\r\n   *  Constant: '<S1>/Constant'\r\n   *  Integrator: '<S183>/Integrator'\r\n   *  Sum: '<S192>/Sum'\r\n   */\r\n  rtb_Divide1 = (quadcopter_sim_X.Integrator_CSTATE_n +\r\n                 quadcopter_sim_B.FilterCoefficient_m) / 0.00464;\r\n\r\n  /* Sum: '<S1>/Add' incorporates:\r\n   *  Sum: '<S1>/Add3'\r\n   */\r\n  u0_tmp = rtb_Add3 + rtb_Divide3;\r\n  u0 = (u0_tmp + rtb_Divide2) + rtb_Divide1;\r\n\r\n  /* Saturate: '<S1>/Saturation' */\r\n  if (u0 > 3500.0) {\r\n    /* Saturate: '<S1>/Saturation' */\r\n    rtb_Saturation = 3500.0;\r\n  } else if (u0 < 0.0) {\r\n    /* Saturate: '<S1>/Saturation' */\r\n    rtb_Saturation = 0.0;\r\n  } else {\r\n    /* Saturate: '<S1>/Saturation' */\r\n    rtb_Saturation = u0;\r\n  }\r\n\r\n  /* End of Saturate: '<S1>/Saturation' */\r\n\r\n  /* Sum: '<S1>/Add1' incorporates:\r\n   *  Sum: '<S1>/Add2'\r\n   */\r\n  rtb_Add3 -= rtb_Divide3;\r\n  u0 = (rtb_Add3 + rtb_Divide2) - rtb_Divide1;\r\n\r\n  /* Saturate: '<S1>/Saturation1' */\r\n  if (u0 > 3500.0) {\r\n    /* Saturate: '<S1>/Saturation1' */\r\n    rtb_Saturation1 = 3500.0;\r\n  } else if (u0 < 0.0) {\r\n    /* Saturate: '<S1>/Saturation1' */\r\n    rtb_Saturation1 = 0.0;\r\n  } else {\r\n    /* Saturate: '<S1>/Saturation1' */\r\n    rtb_Saturation1 = u0;\r\n  }\r\n\r\n  /* End of Saturate: '<S1>/Saturation1' */\r\n\r\n  /* Sum: '<S1>/Add2' */\r\n  u0 = (rtb_Add3 - rtb_Divide2) + rtb_Divide1;\r\n\r\n  /* Saturate: '<S1>/Saturation2' */\r\n  if (u0 > 3500.0) {\r\n    /* Saturate: '<S1>/Saturation2' */\r\n    rtb_Saturation2 = 3500.0;\r\n  } else if (u0 < 0.0) {\r\n    /* Saturate: '<S1>/Saturation2' */\r\n    rtb_Saturation2 = 0.0;\r\n  } else {\r\n    /* Saturate: '<S1>/Saturation2' */\r\n    rtb_Saturation2 = u0;\r\n  }\r\n\r\n  /* End of Saturate: '<S1>/Saturation2' */\r\n\r\n  /* Sum: '<S1>/Add3' */\r\n  u0 = (u0_tmp - rtb_Divide2) - rtb_Divide1;\r\n\r\n  /* Saturate: '<S1>/Saturation3' */\r\n  if (u0 > 3500.0) {\r\n    /* Saturate: '<S1>/Saturation3' */\r\n    rtb_Saturation3 = 3500.0;\r\n  } else if (u0 < 0.0) {\r\n    /* Saturate: '<S1>/Saturation3' */\r\n    rtb_Saturation3 = 0.0;\r\n  } else {\r\n    /* Saturate: '<S1>/Saturation3' */\r\n    rtb_Saturation3 = u0;\r\n  }\r\n\r\n  /* End of Saturate: '<S1>/Saturation3' */\r\n  if (rtmIsMajorTimeStep(quadcopter_sim_M)) {\r\n    rt_ertODEUpdateContinuousStates(&quadcopter_sim_M->solverInfo);\r\n\r\n    /* Update absolute time for base rate */\r\n    /* The \"clockTick0\" counts the number of times the code of this task has\r\n     * been executed. The absolute time is the multiplication of \"clockTick0\"\r\n     * and \"Timing.stepSize0\". Size of \"clockTick0\" ensures timer will not\r\n     * overflow during the application lifespan selected.\r\n     */\r\n    ++quadcopter_sim_M->Timing.clockTick0;\r\n    quadcopter_sim_M->Timing.t[0] = rtsiGetSolverStopTime\r\n      (&quadcopter_sim_M->solverInfo);\r\n\r\n    {\r\n      /* Update absolute timer for sample time: [2.0s, 0.0s] */\r\n      /* The \"clockTick1\" counts the number of times the code of this task has\r\n       * been executed. The resolution of this integer timer is 2.0, which is the step size\r\n       * of the task. Size of \"clockTick1\" ensures timer will not overflow during the\r\n       * application lifespan selected.\r\n       */\r\n      quadcopter_sim_M->Timing.clockTick1++;\r\n    }\r\n  }                                    /* end MajorTimeStep */\r\n}\r\n\r\n/* Derivatives for root system: '<Root>' */\r\nvoid quadcopter_sim_derivatives(void)\r\n{\r\n  XDot_quadcopter_sim_T *_rtXdot;\r\n  _rtXdot = ((XDot_quadcopter_sim_T *) quadcopter_sim_M->derivs);\r\n\r\n  /* Derivatives for Integrator: '<S39>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE = -0.57000000000000006;\r\n\r\n  /* Derivatives for Integrator: '<S34>/Filter' */\r\n  _rtXdot->Filter_CSTATE = quadcopter_sim_B.FilterCoefficient;\r\n\r\n  /* Derivatives for Integrator: '<S87>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE_g = -0.0;\r\n\r\n  /* Derivatives for Integrator: '<S82>/Filter' */\r\n  _rtXdot->Filter_CSTATE_h = quadcopter_sim_B.FilterCoefficient_k;\r\n\r\n  /* Derivatives for Integrator: '<S135>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE_o = -0.0;\r\n\r\n  /* Derivatives for Integrator: '<S130>/Filter' */\r\n  _rtXdot->Filter_CSTATE_hc = quadcopter_sim_B.FilterCoefficient_e;\r\n\r\n  /* Derivatives for Integrator: '<S183>/Integrator' */\r\n  _rtXdot->Integrator_CSTATE_n = 0.0;\r\n\r\n  /* Derivatives for Integrator: '<S178>/Filter' */\r\n  _rtXdot->Filter_CSTATE_f = quadcopter_sim_B.FilterCoefficient_m;\r\n}\r\n\r\n/* Model initialize function */\r\nvoid quadcopter_sim_initialize(void)\r\n{\r\n  /* Registration code */\r\n\r\n  /* initialize real-time model */\r\n  (void) memset((void *)quadcopter_sim_M, 0,\r\n                sizeof(RT_MODEL_quadcopter_sim_T));\r\n\r\n  {\r\n    /* Setup solver object */\r\n    rtsiSetSimTimeStepPtr(&quadcopter_sim_M->solverInfo,\r\n                          &quadcopter_sim_M->Timing.simTimeStep);\r\n    rtsiSetTPtr(&quadcopter_sim_M->solverInfo, &rtmGetTPtr(quadcopter_sim_M));\r\n    rtsiSetStepSizePtr(&quadcopter_sim_M->solverInfo,\r\n                       &quadcopter_sim_M->Timing.stepSize0);\r\n    rtsiSetdXPtr(&quadcopter_sim_M->solverInfo, &quadcopter_sim_M->derivs);\r\n    rtsiSetContStatesPtr(&quadcopter_sim_M->solverInfo, (real_T **)\r\n                         &quadcopter_sim_M->contStates);\r\n    rtsiSetNumContStatesPtr(&quadcopter_sim_M->solverInfo,\r\n      &quadcopter_sim_M->Sizes.numContStates);\r\n    rtsiSetNumPeriodicContStatesPtr(&quadcopter_sim_M->solverInfo,\r\n      &quadcopter_sim_M->Sizes.numPeriodicContStates);\r\n    rtsiSetPeriodicContStateIndicesPtr(&quadcopter_sim_M->solverInfo,\r\n      &quadcopter_sim_M->periodicContStateIndices);\r\n    rtsiSetPeriodicContStateRangesPtr(&quadcopter_sim_M->solverInfo,\r\n      &quadcopter_sim_M->periodicContStateRanges);\r\n    rtsiSetErrorStatusPtr(&quadcopter_sim_M->solverInfo, (&rtmGetErrorStatus\r\n      (quadcopter_sim_M)));\r\n    rtsiSetRTModelPtr(&quadcopter_sim_M->solverInfo, quadcopter_sim_M);\r\n  }\r\n\r\n  rtsiSetSimTimeStep(&quadcopter_sim_M->solverInfo, MAJOR_TIME_STEP);\r\n  quadcopter_sim_M->intgData.y = quadcopter_sim_M->odeY;\r\n  quadcopter_sim_M->intgData.f[0] = quadcopter_sim_M->odeF[0];\r\n  quadcopter_sim_M->intgData.f[1] = quadcopter_sim_M->odeF[1];\r\n  quadcopter_sim_M->intgData.f[2] = quadcopter_sim_M->odeF[2];\r\n  quadcopter_sim_M->contStates = ((X_quadcopter_sim_T *) &quadcopter_sim_X);\r\n  rtsiSetSolverData(&quadcopter_sim_M->solverInfo, (void *)\r\n                    &quadcopter_sim_M->intgData);\r\n  rtsiSetIsMinorTimeStepWithModeChange(&quadcopter_sim_M->solverInfo, false);\r\n  rtsiSetSolverName(&quadcopter_sim_M->solverInfo,\"ode3\");\r\n  rtmSetTPtr(quadcopter_sim_M, &quadcopter_sim_M->Timing.tArray[0]);\r\n  quadcopter_sim_M->Timing.stepSize0 = 2.0;\r\n\r\n  /* block I/O */\r\n  (void) memset(((void *) &quadcopter_sim_B), 0,\r\n                sizeof(B_quadcopter_sim_T));\r\n\r\n  /* states (continuous) */\r\n  {\r\n    (void) memset((void *)&quadcopter_sim_X, 0,\r\n                  sizeof(X_quadcopter_sim_T));\r\n  }\r\n\r\n  /* InitializeConditions for Integrator: '<S39>/Integrator' */\r\n  quadcopter_sim_X.Integrator_CSTATE = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S34>/Filter' */\r\n  quadcopter_sim_X.Filter_CSTATE = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S87>/Integrator' */\r\n  quadcopter_sim_X.Integrator_CSTATE_g = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S82>/Filter' */\r\n  quadcopter_sim_X.Filter_CSTATE_h = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S135>/Integrator' */\r\n  quadcopter_sim_X.Integrator_CSTATE_o = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S130>/Filter' */\r\n  quadcopter_sim_X.Filter_CSTATE_hc = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S183>/Integrator' */\r\n  quadcopter_sim_X.Integrator_CSTATE_n = 0.0;\r\n\r\n  /* InitializeConditions for Integrator: '<S178>/Filter' */\r\n  quadcopter_sim_X.Filter_CSTATE_f = 0.0;\r\n}\r\n\r\n/* Model terminate function */\r\nvoid quadcopter_sim_terminate(void)\r\n{\r\n  /* (no terminate code required) */\r\n}\r\n"},{"name":"quadcopter_sim.h","type":"header","group":"model","path":"C:\\Users\\Artis\\Desktop\\Ladybug\\Simulink\\V4 calib controller\\quadcopter_sim_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * quadcopter_sim.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"quadcopter_sim\".\r\n *\r\n * Model version              : 2.35\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Fri May 19 10:25:36 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_quadcopter_sim_h_\r\n#define RTW_HEADER_quadcopter_sim_h_\r\n#ifndef quadcopter_sim_COMMON_INCLUDES_\r\n#define quadcopter_sim_COMMON_INCLUDES_\r\n#include \"rtwtypes.h\"\r\n#include \"rtw_continuous.h\"\r\n#include \"rtw_solver.h\"\r\n#endif                                 /* quadcopter_sim_COMMON_INCLUDES_ */\r\n\r\n#include \"quadcopter_sim_types.h\"\r\n#include <string.h>\r\n\r\n/* Macros for accessing real-time model data structure */\r\n#ifndef rtmGetContStateDisabled\r\n#define rtmGetContStateDisabled(rtm)   ((rtm)->contStateDisabled)\r\n#endif\r\n\r\n#ifndef rtmSetContStateDisabled\r\n#define rtmSetContStateDisabled(rtm, val) ((rtm)->contStateDisabled = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContStates\r\n#define rtmGetContStates(rtm)          ((rtm)->contStates)\r\n#endif\r\n\r\n#ifndef rtmSetContStates\r\n#define rtmSetContStates(rtm, val)     ((rtm)->contStates = (val))\r\n#endif\r\n\r\n#ifndef rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmGetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm) ((rtm)->CTOutputIncnstWithState)\r\n#endif\r\n\r\n#ifndef rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag\r\n#define rtmSetContTimeOutputInconsistentWithStateAtMajorStepFlag(rtm, val) ((rtm)->CTOutputIncnstWithState = (val))\r\n#endif\r\n\r\n#ifndef rtmGetDerivCacheNeedsReset\r\n#define rtmGetDerivCacheNeedsReset(rtm) ((rtm)->derivCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetDerivCacheNeedsReset\r\n#define rtmSetDerivCacheNeedsReset(rtm, val) ((rtm)->derivCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetIntgData\r\n#define rtmGetIntgData(rtm)            ((rtm)->intgData)\r\n#endif\r\n\r\n#ifndef rtmSetIntgData\r\n#define rtmSetIntgData(rtm, val)       ((rtm)->intgData = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeF\r\n#define rtmGetOdeF(rtm)                ((rtm)->odeF)\r\n#endif\r\n\r\n#ifndef rtmSetOdeF\r\n#define rtmSetOdeF(rtm, val)           ((rtm)->odeF = (val))\r\n#endif\r\n\r\n#ifndef rtmGetOdeY\r\n#define rtmGetOdeY(rtm)                ((rtm)->odeY)\r\n#endif\r\n\r\n#ifndef rtmSetOdeY\r\n#define rtmSetOdeY(rtm, val)           ((rtm)->odeY = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateIndices\r\n#define rtmGetPeriodicContStateIndices(rtm) ((rtm)->periodicContStateIndices)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateIndices\r\n#define rtmSetPeriodicContStateIndices(rtm, val) ((rtm)->periodicContStateIndices = (val))\r\n#endif\r\n\r\n#ifndef rtmGetPeriodicContStateRanges\r\n#define rtmGetPeriodicContStateRanges(rtm) ((rtm)->periodicContStateRanges)\r\n#endif\r\n\r\n#ifndef rtmSetPeriodicContStateRanges\r\n#define rtmSetPeriodicContStateRanges(rtm, val) ((rtm)->periodicContStateRanges = (val))\r\n#endif\r\n\r\n#ifndef rtmGetZCCacheNeedsReset\r\n#define rtmGetZCCacheNeedsReset(rtm)   ((rtm)->zCCacheNeedsReset)\r\n#endif\r\n\r\n#ifndef rtmSetZCCacheNeedsReset\r\n#define rtmSetZCCacheNeedsReset(rtm, val) ((rtm)->zCCacheNeedsReset = (val))\r\n#endif\r\n\r\n#ifndef rtmGetdX\r\n#define rtmGetdX(rtm)                  ((rtm)->derivs)\r\n#endif\r\n\r\n#ifndef rtmSetdX\r\n#define rtmSetdX(rtm, val)             ((rtm)->derivs = (val))\r\n#endif\r\n\r\n#ifndef rtmGetErrorStatus\r\n#define rtmGetErrorStatus(rtm)         ((rtm)->errorStatus)\r\n#endif\r\n\r\n#ifndef rtmSetErrorStatus\r\n#define rtmSetErrorStatus(rtm, val)    ((rtm)->errorStatus = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequested\r\n#define rtmGetStopRequested(rtm)       ((rtm)->Timing.stopRequestedFlag)\r\n#endif\r\n\r\n#ifndef rtmSetStopRequested\r\n#define rtmSetStopRequested(rtm, val)  ((rtm)->Timing.stopRequestedFlag = (val))\r\n#endif\r\n\r\n#ifndef rtmGetStopRequestedPtr\r\n#define rtmGetStopRequestedPtr(rtm)    (&((rtm)->Timing.stopRequestedFlag))\r\n#endif\r\n\r\n#ifndef rtmGetT\r\n#define rtmGetT(rtm)                   (rtmGetTPtr((rtm))[0])\r\n#endif\r\n\r\n#ifndef rtmGetTPtr\r\n#define rtmGetTPtr(rtm)                ((rtm)->Timing.t)\r\n#endif\r\n\r\n/* Block signals (default storage) */\r\ntypedef struct {\r\n  real_T FilterCoefficient;            /* '<S42>/Filter Coefficient' */\r\n  real_T FilterCoefficient_k;          /* '<S90>/Filter Coefficient' */\r\n  real_T FilterCoefficient_e;          /* '<S138>/Filter Coefficient' */\r\n  real_T FilterCoefficient_m;          /* '<S186>/Filter Coefficient' */\r\n} B_quadcopter_sim_T;\r\n\r\n/* Continuous states (default storage) */\r\ntypedef struct {\r\n  real_T Integrator_CSTATE;            /* '<S39>/Integrator' */\r\n  real_T Filter_CSTATE;                /* '<S34>/Filter' */\r\n  real_T Integrator_CSTATE_g;          /* '<S87>/Integrator' */\r\n  real_T Filter_CSTATE_h;              /* '<S82>/Filter' */\r\n  real_T Integrator_CSTATE_o;          /* '<S135>/Integrator' */\r\n  real_T Filter_CSTATE_hc;             /* '<S130>/Filter' */\r\n  real_T Integrator_CSTATE_n;          /* '<S183>/Integrator' */\r\n  real_T Filter_CSTATE_f;              /* '<S178>/Filter' */\r\n} X_quadcopter_sim_T;\r\n\r\n/* State derivatives (default storage) */\r\ntypedef struct {\r\n  real_T Integrator_CSTATE;            /* '<S39>/Integrator' */\r\n  real_T Filter_CSTATE;                /* '<S34>/Filter' */\r\n  real_T Integrator_CSTATE_g;          /* '<S87>/Integrator' */\r\n  real_T Filter_CSTATE_h;              /* '<S82>/Filter' */\r\n  real_T Integrator_CSTATE_o;          /* '<S135>/Integrator' */\r\n  real_T Filter_CSTATE_hc;             /* '<S130>/Filter' */\r\n  real_T Integrator_CSTATE_n;          /* '<S183>/Integrator' */\r\n  real_T Filter_CSTATE_f;              /* '<S178>/Filter' */\r\n} XDot_quadcopter_sim_T;\r\n\r\n/* State disabled  */\r\ntypedef struct {\r\n  boolean_T Integrator_CSTATE;         /* '<S39>/Integrator' */\r\n  boolean_T Filter_CSTATE;             /* '<S34>/Filter' */\r\n  boolean_T Integrator_CSTATE_g;       /* '<S87>/Integrator' */\r\n  boolean_T Filter_CSTATE_h;           /* '<S82>/Filter' */\r\n  boolean_T Integrator_CSTATE_o;       /* '<S135>/Integrator' */\r\n  boolean_T Filter_CSTATE_hc;          /* '<S130>/Filter' */\r\n  boolean_T Integrator_CSTATE_n;       /* '<S183>/Integrator' */\r\n  boolean_T Filter_CSTATE_f;           /* '<S178>/Filter' */\r\n} XDis_quadcopter_sim_T;\r\n\r\n#ifndef ODE3_INTG\r\n#define ODE3_INTG\r\n\r\n/* ODE3 Integration Data */\r\ntypedef struct {\r\n  real_T *y;                           /* output */\r\n  real_T *f[3];                        /* derivatives */\r\n} ODE3_IntgData;\r\n\r\n#endif\r\n\r\n/* Real-time Model Data Structure */\r\nstruct tag_RTM_quadcopter_sim_T {\r\n  const char_T *errorStatus;\r\n  RTWSolverInfo solverInfo;\r\n  X_quadcopter_sim_T *contStates;\r\n  int_T *periodicContStateIndices;\r\n  real_T *periodicContStateRanges;\r\n  real_T *derivs;\r\n  XDis_quadcopter_sim_T *contStateDisabled;\r\n  boolean_T zCCacheNeedsReset;\r\n  boolean_T derivCacheNeedsReset;\r\n  boolean_T CTOutputIncnstWithState;\r\n  real_T odeY[8];\r\n  real_T odeF[3][8];\r\n  ODE3_IntgData intgData;\r\n\r\n  /*\r\n   * Sizes:\r\n   * The following substructure contains sizes information\r\n   * for many of the model attributes such as inputs, outputs,\r\n   * dwork, sample times, etc.\r\n   */\r\n  struct {\r\n    int_T numContStates;\r\n    int_T numPeriodicContStates;\r\n    int_T numSampTimes;\r\n  } Sizes;\r\n\r\n  /*\r\n   * Timing:\r\n   * The following substructure contains information regarding\r\n   * the timing information for the model.\r\n   */\r\n  struct {\r\n    uint16_T clockTick0;\r\n    time_T stepSize0;\r\n    uint16_T clockTick1;\r\n    SimTimeStep simTimeStep;\r\n    boolean_T stopRequestedFlag;\r\n    time_T *t;\r\n    time_T tArray[2];\r\n  } Timing;\r\n};\r\n\r\n/* Block signals (default storage) */\r\nextern B_quadcopter_sim_T quadcopter_sim_B;\r\n\r\n/* Continuous states (default storage) */\r\nextern X_quadcopter_sim_T quadcopter_sim_X;\r\n\r\n/* Model entry point functions */\r\nextern void quadcopter_sim_initialize(void);\r\nextern void quadcopter_sim_step(void);\r\nextern void quadcopter_sim_terminate(void);\r\n\r\n/* Real-time Model object */\r\nextern RT_MODEL_quadcopter_sim_T *const quadcopter_sim_M;\r\n\r\n/*-\r\n * These blocks were eliminated from the model due to optimizations:\r\n *\r\n * Block '<S2>/Saturation1' : Unused code path elimination\r\n * Block '<S2>/Saturation2' : Unused code path elimination\r\n * Block '<S2>/Saturation3' : Unused code path elimination\r\n * Block '<S2>/Saturation4' : Unused code path elimination\r\n */\r\n\r\n/*-\r\n * The generated code includes comments that allow you to trace directly\r\n * back to the appropriate location in the model.  The basic format\r\n * is <system>/block_name, where system is the system number (uniquely\r\n * assigned by Simulink) and block_name is the name of the block.\r\n *\r\n * Use the MATLAB hilite_system command to trace the generated code back\r\n * to the model.  For example,\r\n *\r\n * hilite_system('<S3>')    - opens system 3\r\n * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3\r\n *\r\n * Here is the system hierarchy for this model\r\n *\r\n * '<Root>' : 'quadcopter_sim'\r\n * '<S1>'   : 'quadcopter_sim/Controller'\r\n * '<S2>'   : 'quadcopter_sim/Convert to PWM for MCU'\r\n * '<S3>'   : 'quadcopter_sim/Controller/MATLAB Function1'\r\n * '<S4>'   : 'quadcopter_sim/Controller/PID Controller'\r\n * '<S5>'   : 'quadcopter_sim/Controller/PID Controller1'\r\n * '<S6>'   : 'quadcopter_sim/Controller/PID Controller2'\r\n * '<S7>'   : 'quadcopter_sim/Controller/PID Controller3'\r\n * '<S8>'   : 'quadcopter_sim/Controller/PID Controller/Anti-windup'\r\n * '<S9>'   : 'quadcopter_sim/Controller/PID Controller/D Gain'\r\n * '<S10>'  : 'quadcopter_sim/Controller/PID Controller/Filter'\r\n * '<S11>'  : 'quadcopter_sim/Controller/PID Controller/Filter ICs'\r\n * '<S12>'  : 'quadcopter_sim/Controller/PID Controller/I Gain'\r\n * '<S13>'  : 'quadcopter_sim/Controller/PID Controller/Ideal P Gain'\r\n * '<S14>'  : 'quadcopter_sim/Controller/PID Controller/Ideal P Gain Fdbk'\r\n * '<S15>'  : 'quadcopter_sim/Controller/PID Controller/Integrator'\r\n * '<S16>'  : 'quadcopter_sim/Controller/PID Controller/Integrator ICs'\r\n * '<S17>'  : 'quadcopter_sim/Controller/PID Controller/N Copy'\r\n * '<S18>'  : 'quadcopter_sim/Controller/PID Controller/N Gain'\r\n * '<S19>'  : 'quadcopter_sim/Controller/PID Controller/P Copy'\r\n * '<S20>'  : 'quadcopter_sim/Controller/PID Controller/Parallel P Gain'\r\n * '<S21>'  : 'quadcopter_sim/Controller/PID Controller/Reset Signal'\r\n * '<S22>'  : 'quadcopter_sim/Controller/PID Controller/Saturation'\r\n * '<S23>'  : 'quadcopter_sim/Controller/PID Controller/Saturation Fdbk'\r\n * '<S24>'  : 'quadcopter_sim/Controller/PID Controller/Sum'\r\n * '<S25>'  : 'quadcopter_sim/Controller/PID Controller/Sum Fdbk'\r\n * '<S26>'  : 'quadcopter_sim/Controller/PID Controller/Tracking Mode'\r\n * '<S27>'  : 'quadcopter_sim/Controller/PID Controller/Tracking Mode Sum'\r\n * '<S28>'  : 'quadcopter_sim/Controller/PID Controller/Tsamp - Integral'\r\n * '<S29>'  : 'quadcopter_sim/Controller/PID Controller/Tsamp - Ngain'\r\n * '<S30>'  : 'quadcopter_sim/Controller/PID Controller/postSat Signal'\r\n * '<S31>'  : 'quadcopter_sim/Controller/PID Controller/preSat Signal'\r\n * '<S32>'  : 'quadcopter_sim/Controller/PID Controller/Anti-windup/Passthrough'\r\n * '<S33>'  : 'quadcopter_sim/Controller/PID Controller/D Gain/Internal Parameters'\r\n * '<S34>'  : 'quadcopter_sim/Controller/PID Controller/Filter/Cont. Filter'\r\n * '<S35>'  : 'quadcopter_sim/Controller/PID Controller/Filter ICs/Internal IC - Filter'\r\n * '<S36>'  : 'quadcopter_sim/Controller/PID Controller/I Gain/Internal Parameters'\r\n * '<S37>'  : 'quadcopter_sim/Controller/PID Controller/Ideal P Gain/Passthrough'\r\n * '<S38>'  : 'quadcopter_sim/Controller/PID Controller/Ideal P Gain Fdbk/Disabled'\r\n * '<S39>'  : 'quadcopter_sim/Controller/PID Controller/Integrator/Continuous'\r\n * '<S40>'  : 'quadcopter_sim/Controller/PID Controller/Integrator ICs/Internal IC'\r\n * '<S41>'  : 'quadcopter_sim/Controller/PID Controller/N Copy/Disabled'\r\n * '<S42>'  : 'quadcopter_sim/Controller/PID Controller/N Gain/Internal Parameters'\r\n * '<S43>'  : 'quadcopter_sim/Controller/PID Controller/P Copy/Disabled'\r\n * '<S44>'  : 'quadcopter_sim/Controller/PID Controller/Parallel P Gain/Internal Parameters'\r\n * '<S45>'  : 'quadcopter_sim/Controller/PID Controller/Reset Signal/Disabled'\r\n * '<S46>'  : 'quadcopter_sim/Controller/PID Controller/Saturation/Passthrough'\r\n * '<S47>'  : 'quadcopter_sim/Controller/PID Controller/Saturation Fdbk/Disabled'\r\n * '<S48>'  : 'quadcopter_sim/Controller/PID Controller/Sum/Sum_PID'\r\n * '<S49>'  : 'quadcopter_sim/Controller/PID Controller/Sum Fdbk/Disabled'\r\n * '<S50>'  : 'quadcopter_sim/Controller/PID Controller/Tracking Mode/Disabled'\r\n * '<S51>'  : 'quadcopter_sim/Controller/PID Controller/Tracking Mode Sum/Passthrough'\r\n * '<S52>'  : 'quadcopter_sim/Controller/PID Controller/Tsamp - Integral/TsSignalSpecification'\r\n * '<S53>'  : 'quadcopter_sim/Controller/PID Controller/Tsamp - Ngain/Passthrough'\r\n * '<S54>'  : 'quadcopter_sim/Controller/PID Controller/postSat Signal/Forward_Path'\r\n * '<S55>'  : 'quadcopter_sim/Controller/PID Controller/preSat Signal/Forward_Path'\r\n * '<S56>'  : 'quadcopter_sim/Controller/PID Controller1/Anti-windup'\r\n * '<S57>'  : 'quadcopter_sim/Controller/PID Controller1/D Gain'\r\n * '<S58>'  : 'quadcopter_sim/Controller/PID Controller1/Filter'\r\n * '<S59>'  : 'quadcopter_sim/Controller/PID Controller1/Filter ICs'\r\n * '<S60>'  : 'quadcopter_sim/Controller/PID Controller1/I Gain'\r\n * '<S61>'  : 'quadcopter_sim/Controller/PID Controller1/Ideal P Gain'\r\n * '<S62>'  : 'quadcopter_sim/Controller/PID Controller1/Ideal P Gain Fdbk'\r\n * '<S63>'  : 'quadcopter_sim/Controller/PID Controller1/Integrator'\r\n * '<S64>'  : 'quadcopter_sim/Controller/PID Controller1/Integrator ICs'\r\n * '<S65>'  : 'quadcopter_sim/Controller/PID Controller1/N Copy'\r\n * '<S66>'  : 'quadcopter_sim/Controller/PID Controller1/N Gain'\r\n * '<S67>'  : 'quadcopter_sim/Controller/PID Controller1/P Copy'\r\n * '<S68>'  : 'quadcopter_sim/Controller/PID Controller1/Parallel P Gain'\r\n * '<S69>'  : 'quadcopter_sim/Controller/PID Controller1/Reset Signal'\r\n * '<S70>'  : 'quadcopter_sim/Controller/PID Controller1/Saturation'\r\n * '<S71>'  : 'quadcopter_sim/Controller/PID Controller1/Saturation Fdbk'\r\n * '<S72>'  : 'quadcopter_sim/Controller/PID Controller1/Sum'\r\n * '<S73>'  : 'quadcopter_sim/Controller/PID Controller1/Sum Fdbk'\r\n * '<S74>'  : 'quadcopter_sim/Controller/PID Controller1/Tracking Mode'\r\n * '<S75>'  : 'quadcopter_sim/Controller/PID Controller1/Tracking Mode Sum'\r\n * '<S76>'  : 'quadcopter_sim/Controller/PID Controller1/Tsamp - Integral'\r\n * '<S77>'  : 'quadcopter_sim/Controller/PID Controller1/Tsamp - Ngain'\r\n * '<S78>'  : 'quadcopter_sim/Controller/PID Controller1/postSat Signal'\r\n * '<S79>'  : 'quadcopter_sim/Controller/PID Controller1/preSat Signal'\r\n * '<S80>'  : 'quadcopter_sim/Controller/PID Controller1/Anti-windup/Passthrough'\r\n * '<S81>'  : 'quadcopter_sim/Controller/PID Controller1/D Gain/Internal Parameters'\r\n * '<S82>'  : 'quadcopter_sim/Controller/PID Controller1/Filter/Cont. Filter'\r\n * '<S83>'  : 'quadcopter_sim/Controller/PID Controller1/Filter ICs/Internal IC - Filter'\r\n * '<S84>'  : 'quadcopter_sim/Controller/PID Controller1/I Gain/Internal Parameters'\r\n * '<S85>'  : 'quadcopter_sim/Controller/PID Controller1/Ideal P Gain/Passthrough'\r\n * '<S86>'  : 'quadcopter_sim/Controller/PID Controller1/Ideal P Gain Fdbk/Disabled'\r\n * '<S87>'  : 'quadcopter_sim/Controller/PID Controller1/Integrator/Continuous'\r\n * '<S88>'  : 'quadcopter_sim/Controller/PID Controller1/Integrator ICs/Internal IC'\r\n * '<S89>'  : 'quadcopter_sim/Controller/PID Controller1/N Copy/Disabled'\r\n * '<S90>'  : 'quadcopter_sim/Controller/PID Controller1/N Gain/Internal Parameters'\r\n * '<S91>'  : 'quadcopter_sim/Controller/PID Controller1/P Copy/Disabled'\r\n * '<S92>'  : 'quadcopter_sim/Controller/PID Controller1/Parallel P Gain/Internal Parameters'\r\n * '<S93>'  : 'quadcopter_sim/Controller/PID Controller1/Reset Signal/Disabled'\r\n * '<S94>'  : 'quadcopter_sim/Controller/PID Controller1/Saturation/Passthrough'\r\n * '<S95>'  : 'quadcopter_sim/Controller/PID Controller1/Saturation Fdbk/Disabled'\r\n * '<S96>'  : 'quadcopter_sim/Controller/PID Controller1/Sum/Sum_PID'\r\n * '<S97>'  : 'quadcopter_sim/Controller/PID Controller1/Sum Fdbk/Disabled'\r\n * '<S98>'  : 'quadcopter_sim/Controller/PID Controller1/Tracking Mode/Disabled'\r\n * '<S99>'  : 'quadcopter_sim/Controller/PID Controller1/Tracking Mode Sum/Passthrough'\r\n * '<S100>' : 'quadcopter_sim/Controller/PID Controller1/Tsamp - Integral/TsSignalSpecification'\r\n * '<S101>' : 'quadcopter_sim/Controller/PID Controller1/Tsamp - Ngain/Passthrough'\r\n * '<S102>' : 'quadcopter_sim/Controller/PID Controller1/postSat Signal/Forward_Path'\r\n * '<S103>' : 'quadcopter_sim/Controller/PID Controller1/preSat Signal/Forward_Path'\r\n * '<S104>' : 'quadcopter_sim/Controller/PID Controller2/Anti-windup'\r\n * '<S105>' : 'quadcopter_sim/Controller/PID Controller2/D Gain'\r\n * '<S106>' : 'quadcopter_sim/Controller/PID Controller2/Filter'\r\n * '<S107>' : 'quadcopter_sim/Controller/PID Controller2/Filter ICs'\r\n * '<S108>' : 'quadcopter_sim/Controller/PID Controller2/I Gain'\r\n * '<S109>' : 'quadcopter_sim/Controller/PID Controller2/Ideal P Gain'\r\n * '<S110>' : 'quadcopter_sim/Controller/PID Controller2/Ideal P Gain Fdbk'\r\n * '<S111>' : 'quadcopter_sim/Controller/PID Controller2/Integrator'\r\n * '<S112>' : 'quadcopter_sim/Controller/PID Controller2/Integrator ICs'\r\n * '<S113>' : 'quadcopter_sim/Controller/PID Controller2/N Copy'\r\n * '<S114>' : 'quadcopter_sim/Controller/PID Controller2/N Gain'\r\n * '<S115>' : 'quadcopter_sim/Controller/PID Controller2/P Copy'\r\n * '<S116>' : 'quadcopter_sim/Controller/PID Controller2/Parallel P Gain'\r\n * '<S117>' : 'quadcopter_sim/Controller/PID Controller2/Reset Signal'\r\n * '<S118>' : 'quadcopter_sim/Controller/PID Controller2/Saturation'\r\n * '<S119>' : 'quadcopter_sim/Controller/PID Controller2/Saturation Fdbk'\r\n * '<S120>' : 'quadcopter_sim/Controller/PID Controller2/Sum'\r\n * '<S121>' : 'quadcopter_sim/Controller/PID Controller2/Sum Fdbk'\r\n * '<S122>' : 'quadcopter_sim/Controller/PID Controller2/Tracking Mode'\r\n * '<S123>' : 'quadcopter_sim/Controller/PID Controller2/Tracking Mode Sum'\r\n * '<S124>' : 'quadcopter_sim/Controller/PID Controller2/Tsamp - Integral'\r\n * '<S125>' : 'quadcopter_sim/Controller/PID Controller2/Tsamp - Ngain'\r\n * '<S126>' : 'quadcopter_sim/Controller/PID Controller2/postSat Signal'\r\n * '<S127>' : 'quadcopter_sim/Controller/PID Controller2/preSat Signal'\r\n * '<S128>' : 'quadcopter_sim/Controller/PID Controller2/Anti-windup/Passthrough'\r\n * '<S129>' : 'quadcopter_sim/Controller/PID Controller2/D Gain/Internal Parameters'\r\n * '<S130>' : 'quadcopter_sim/Controller/PID Controller2/Filter/Cont. Filter'\r\n * '<S131>' : 'quadcopter_sim/Controller/PID Controller2/Filter ICs/Internal IC - Filter'\r\n * '<S132>' : 'quadcopter_sim/Controller/PID Controller2/I Gain/Internal Parameters'\r\n * '<S133>' : 'quadcopter_sim/Controller/PID Controller2/Ideal P Gain/Passthrough'\r\n * '<S134>' : 'quadcopter_sim/Controller/PID Controller2/Ideal P Gain Fdbk/Disabled'\r\n * '<S135>' : 'quadcopter_sim/Controller/PID Controller2/Integrator/Continuous'\r\n * '<S136>' : 'quadcopter_sim/Controller/PID Controller2/Integrator ICs/Internal IC'\r\n * '<S137>' : 'quadcopter_sim/Controller/PID Controller2/N Copy/Disabled'\r\n * '<S138>' : 'quadcopter_sim/Controller/PID Controller2/N Gain/Internal Parameters'\r\n * '<S139>' : 'quadcopter_sim/Controller/PID Controller2/P Copy/Disabled'\r\n * '<S140>' : 'quadcopter_sim/Controller/PID Controller2/Parallel P Gain/Internal Parameters'\r\n * '<S141>' : 'quadcopter_sim/Controller/PID Controller2/Reset Signal/Disabled'\r\n * '<S142>' : 'quadcopter_sim/Controller/PID Controller2/Saturation/Passthrough'\r\n * '<S143>' : 'quadcopter_sim/Controller/PID Controller2/Saturation Fdbk/Disabled'\r\n * '<S144>' : 'quadcopter_sim/Controller/PID Controller2/Sum/Sum_PID'\r\n * '<S145>' : 'quadcopter_sim/Controller/PID Controller2/Sum Fdbk/Disabled'\r\n * '<S146>' : 'quadcopter_sim/Controller/PID Controller2/Tracking Mode/Disabled'\r\n * '<S147>' : 'quadcopter_sim/Controller/PID Controller2/Tracking Mode Sum/Passthrough'\r\n * '<S148>' : 'quadcopter_sim/Controller/PID Controller2/Tsamp - Integral/TsSignalSpecification'\r\n * '<S149>' : 'quadcopter_sim/Controller/PID Controller2/Tsamp - Ngain/Passthrough'\r\n * '<S150>' : 'quadcopter_sim/Controller/PID Controller2/postSat Signal/Forward_Path'\r\n * '<S151>' : 'quadcopter_sim/Controller/PID Controller2/preSat Signal/Forward_Path'\r\n * '<S152>' : 'quadcopter_sim/Controller/PID Controller3/Anti-windup'\r\n * '<S153>' : 'quadcopter_sim/Controller/PID Controller3/D Gain'\r\n * '<S154>' : 'quadcopter_sim/Controller/PID Controller3/Filter'\r\n * '<S155>' : 'quadcopter_sim/Controller/PID Controller3/Filter ICs'\r\n * '<S156>' : 'quadcopter_sim/Controller/PID Controller3/I Gain'\r\n * '<S157>' : 'quadcopter_sim/Controller/PID Controller3/Ideal P Gain'\r\n * '<S158>' : 'quadcopter_sim/Controller/PID Controller3/Ideal P Gain Fdbk'\r\n * '<S159>' : 'quadcopter_sim/Controller/PID Controller3/Integrator'\r\n * '<S160>' : 'quadcopter_sim/Controller/PID Controller3/Integrator ICs'\r\n * '<S161>' : 'quadcopter_sim/Controller/PID Controller3/N Copy'\r\n * '<S162>' : 'quadcopter_sim/Controller/PID Controller3/N Gain'\r\n * '<S163>' : 'quadcopter_sim/Controller/PID Controller3/P Copy'\r\n * '<S164>' : 'quadcopter_sim/Controller/PID Controller3/Parallel P Gain'\r\n * '<S165>' : 'quadcopter_sim/Controller/PID Controller3/Reset Signal'\r\n * '<S166>' : 'quadcopter_sim/Controller/PID Controller3/Saturation'\r\n * '<S167>' : 'quadcopter_sim/Controller/PID Controller3/Saturation Fdbk'\r\n * '<S168>' : 'quadcopter_sim/Controller/PID Controller3/Sum'\r\n * '<S169>' : 'quadcopter_sim/Controller/PID Controller3/Sum Fdbk'\r\n * '<S170>' : 'quadcopter_sim/Controller/PID Controller3/Tracking Mode'\r\n * '<S171>' : 'quadcopter_sim/Controller/PID Controller3/Tracking Mode Sum'\r\n * '<S172>' : 'quadcopter_sim/Controller/PID Controller3/Tsamp - Integral'\r\n * '<S173>' : 'quadcopter_sim/Controller/PID Controller3/Tsamp - Ngain'\r\n * '<S174>' : 'quadcopter_sim/Controller/PID Controller3/postSat Signal'\r\n * '<S175>' : 'quadcopter_sim/Controller/PID Controller3/preSat Signal'\r\n * '<S176>' : 'quadcopter_sim/Controller/PID Controller3/Anti-windup/Passthrough'\r\n * '<S177>' : 'quadcopter_sim/Controller/PID Controller3/D Gain/Internal Parameters'\r\n * '<S178>' : 'quadcopter_sim/Controller/PID Controller3/Filter/Cont. Filter'\r\n * '<S179>' : 'quadcopter_sim/Controller/PID Controller3/Filter ICs/Internal IC - Filter'\r\n * '<S180>' : 'quadcopter_sim/Controller/PID Controller3/I Gain/Internal Parameters'\r\n * '<S181>' : 'quadcopter_sim/Controller/PID Controller3/Ideal P Gain/Passthrough'\r\n * '<S182>' : 'quadcopter_sim/Controller/PID Controller3/Ideal P Gain Fdbk/Disabled'\r\n * '<S183>' : 'quadcopter_sim/Controller/PID Controller3/Integrator/Continuous'\r\n * '<S184>' : 'quadcopter_sim/Controller/PID Controller3/Integrator ICs/Internal IC'\r\n * '<S185>' : 'quadcopter_sim/Controller/PID Controller3/N Copy/Disabled'\r\n * '<S186>' : 'quadcopter_sim/Controller/PID Controller3/N Gain/Internal Parameters'\r\n * '<S187>' : 'quadcopter_sim/Controller/PID Controller3/P Copy/Disabled'\r\n * '<S188>' : 'quadcopter_sim/Controller/PID Controller3/Parallel P Gain/Internal Parameters'\r\n * '<S189>' : 'quadcopter_sim/Controller/PID Controller3/Reset Signal/Disabled'\r\n * '<S190>' : 'quadcopter_sim/Controller/PID Controller3/Saturation/Passthrough'\r\n * '<S191>' : 'quadcopter_sim/Controller/PID Controller3/Saturation Fdbk/Disabled'\r\n * '<S192>' : 'quadcopter_sim/Controller/PID Controller3/Sum/Sum_PID'\r\n * '<S193>' : 'quadcopter_sim/Controller/PID Controller3/Sum Fdbk/Disabled'\r\n * '<S194>' : 'quadcopter_sim/Controller/PID Controller3/Tracking Mode/Disabled'\r\n * '<S195>' : 'quadcopter_sim/Controller/PID Controller3/Tracking Mode Sum/Passthrough'\r\n * '<S196>' : 'quadcopter_sim/Controller/PID Controller3/Tsamp - Integral/TsSignalSpecification'\r\n * '<S197>' : 'quadcopter_sim/Controller/PID Controller3/Tsamp - Ngain/Passthrough'\r\n * '<S198>' : 'quadcopter_sim/Controller/PID Controller3/postSat Signal/Forward_Path'\r\n * '<S199>' : 'quadcopter_sim/Controller/PID Controller3/preSat Signal/Forward_Path'\r\n * '<S200>' : 'quadcopter_sim/Convert to PWM for MCU/MATLAB Function'\r\n * '<S201>' : 'quadcopter_sim/Convert to PWM for MCU/MATLAB Function1'\r\n * '<S202>' : 'quadcopter_sim/Convert to PWM for MCU/MATLAB Function2'\r\n * '<S203>' : 'quadcopter_sim/Convert to PWM for MCU/MATLAB Function3'\r\n */\r\n#endif                                 /* RTW_HEADER_quadcopter_sim_h_ */\r\n"},{"name":"quadcopter_sim_private.h","type":"header","group":"model","path":"C:\\Users\\Artis\\Desktop\\Ladybug\\Simulink\\V4 calib controller\\quadcopter_sim_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * quadcopter_sim_private.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"quadcopter_sim\".\r\n *\r\n * Model version              : 2.35\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Fri May 19 10:25:36 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_quadcopter_sim_private_h_\r\n#define RTW_HEADER_quadcopter_sim_private_h_\r\n#include \"rtwtypes.h\"\r\n#include \"multiword_types.h\"\r\n#include \"quadcopter_sim_types.h\"\r\n\r\n/* Private macros used by the generated code to access rtModel */\r\n#ifndef rtmIsMajorTimeStep\r\n#define rtmIsMajorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MAJOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmIsMinorTimeStep\r\n#define rtmIsMinorTimeStep(rtm)        (((rtm)->Timing.simTimeStep) == MINOR_TIME_STEP)\r\n#endif\r\n\r\n#ifndef rtmSetTPtr\r\n#define rtmSetTPtr(rtm, val)           ((rtm)->Timing.t = (val))\r\n#endif\r\n\r\n/* private model entry point functions */\r\nextern void quadcopter_sim_derivatives(void);\r\n\r\n#endif                                /* RTW_HEADER_quadcopter_sim_private_h_ */\r\n"},{"name":"quadcopter_sim_types.h","type":"header","group":"model","path":"C:\\Users\\Artis\\Desktop\\Ladybug\\Simulink\\V4 calib controller\\quadcopter_sim_grt_rtw","tag":"","groupDisplay":"Model files","code":"/*\r\n * quadcopter_sim_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"quadcopter_sim\".\r\n *\r\n * Model version              : 2.35\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Fri May 19 10:25:36 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_quadcopter_sim_types_h_\r\n#define RTW_HEADER_quadcopter_sim_types_h_\r\n\r\n/* Forward declaration for rtModel */\r\ntypedef struct tag_RTM_quadcopter_sim_T RT_MODEL_quadcopter_sim_T;\r\n\r\n#endif                                 /* RTW_HEADER_quadcopter_sim_types_h_ */\r\n"},{"name":"multiword_types.h","type":"header","group":"utility","path":"C:\\Users\\Artis\\Desktop\\Ladybug\\Simulink\\V4 calib controller\\quadcopter_sim_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * multiword_types.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"quadcopter_sim\".\r\n *\r\n * Model version              : 2.35\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Fri May 19 10:25:36 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef MULTIWORD_TYPES_H\r\n#define MULTIWORD_TYPES_H\r\n#include \"rtwtypes.h\"\r\n\r\n/*\r\n * MultiWord supporting definitions\r\n */\r\ntypedef long long longlong_T;\r\n\r\n/*\r\n * MultiWord types\r\n */\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} int128m_T;\r\n\r\ntypedef struct {\r\n  int128m_T re;\r\n  int128m_T im;\r\n} cint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[2];\r\n} uint128m_T;\r\n\r\ntypedef struct {\r\n  uint128m_T re;\r\n  uint128m_T im;\r\n} cuint128m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} int192m_T;\r\n\r\ntypedef struct {\r\n  int192m_T re;\r\n  int192m_T im;\r\n} cint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[3];\r\n} uint192m_T;\r\n\r\ntypedef struct {\r\n  uint192m_T re;\r\n  uint192m_T im;\r\n} cuint192m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} int256m_T;\r\n\r\ntypedef struct {\r\n  int256m_T re;\r\n  int256m_T im;\r\n} cint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[4];\r\n} uint256m_T;\r\n\r\ntypedef struct {\r\n  uint256m_T re;\r\n  uint256m_T im;\r\n} cuint256m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} int320m_T;\r\n\r\ntypedef struct {\r\n  int320m_T re;\r\n  int320m_T im;\r\n} cint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[5];\r\n} uint320m_T;\r\n\r\ntypedef struct {\r\n  uint320m_T re;\r\n  uint320m_T im;\r\n} cuint320m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} int384m_T;\r\n\r\ntypedef struct {\r\n  int384m_T re;\r\n  int384m_T im;\r\n} cint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[6];\r\n} uint384m_T;\r\n\r\ntypedef struct {\r\n  uint384m_T re;\r\n  uint384m_T im;\r\n} cuint384m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} int448m_T;\r\n\r\ntypedef struct {\r\n  int448m_T re;\r\n  int448m_T im;\r\n} cint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[7];\r\n} uint448m_T;\r\n\r\ntypedef struct {\r\n  uint448m_T re;\r\n  uint448m_T im;\r\n} cuint448m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} int512m_T;\r\n\r\ntypedef struct {\r\n  int512m_T re;\r\n  int512m_T im;\r\n} cint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[8];\r\n} uint512m_T;\r\n\r\ntypedef struct {\r\n  uint512m_T re;\r\n  uint512m_T im;\r\n} cuint512m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} int576m_T;\r\n\r\ntypedef struct {\r\n  int576m_T re;\r\n  int576m_T im;\r\n} cint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[9];\r\n} uint576m_T;\r\n\r\ntypedef struct {\r\n  uint576m_T re;\r\n  uint576m_T im;\r\n} cuint576m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} int640m_T;\r\n\r\ntypedef struct {\r\n  int640m_T re;\r\n  int640m_T im;\r\n} cint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[10];\r\n} uint640m_T;\r\n\r\ntypedef struct {\r\n  uint640m_T re;\r\n  uint640m_T im;\r\n} cuint640m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} int704m_T;\r\n\r\ntypedef struct {\r\n  int704m_T re;\r\n  int704m_T im;\r\n} cint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[11];\r\n} uint704m_T;\r\n\r\ntypedef struct {\r\n  uint704m_T re;\r\n  uint704m_T im;\r\n} cuint704m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} int768m_T;\r\n\r\ntypedef struct {\r\n  int768m_T re;\r\n  int768m_T im;\r\n} cint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[12];\r\n} uint768m_T;\r\n\r\ntypedef struct {\r\n  uint768m_T re;\r\n  uint768m_T im;\r\n} cuint768m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} int832m_T;\r\n\r\ntypedef struct {\r\n  int832m_T re;\r\n  int832m_T im;\r\n} cint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[13];\r\n} uint832m_T;\r\n\r\ntypedef struct {\r\n  uint832m_T re;\r\n  uint832m_T im;\r\n} cuint832m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} int896m_T;\r\n\r\ntypedef struct {\r\n  int896m_T re;\r\n  int896m_T im;\r\n} cint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[14];\r\n} uint896m_T;\r\n\r\ntypedef struct {\r\n  uint896m_T re;\r\n  uint896m_T im;\r\n} cuint896m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} int960m_T;\r\n\r\ntypedef struct {\r\n  int960m_T re;\r\n  int960m_T im;\r\n} cint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[15];\r\n} uint960m_T;\r\n\r\ntypedef struct {\r\n  uint960m_T re;\r\n  uint960m_T im;\r\n} cuint960m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} int1024m_T;\r\n\r\ntypedef struct {\r\n  int1024m_T re;\r\n  int1024m_T im;\r\n} cint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[16];\r\n} uint1024m_T;\r\n\r\ntypedef struct {\r\n  uint1024m_T re;\r\n  uint1024m_T im;\r\n} cuint1024m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} int1088m_T;\r\n\r\ntypedef struct {\r\n  int1088m_T re;\r\n  int1088m_T im;\r\n} cint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[17];\r\n} uint1088m_T;\r\n\r\ntypedef struct {\r\n  uint1088m_T re;\r\n  uint1088m_T im;\r\n} cuint1088m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} int1152m_T;\r\n\r\ntypedef struct {\r\n  int1152m_T re;\r\n  int1152m_T im;\r\n} cint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[18];\r\n} uint1152m_T;\r\n\r\ntypedef struct {\r\n  uint1152m_T re;\r\n  uint1152m_T im;\r\n} cuint1152m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} int1216m_T;\r\n\r\ntypedef struct {\r\n  int1216m_T re;\r\n  int1216m_T im;\r\n} cint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[19];\r\n} uint1216m_T;\r\n\r\ntypedef struct {\r\n  uint1216m_T re;\r\n  uint1216m_T im;\r\n} cuint1216m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} int1280m_T;\r\n\r\ntypedef struct {\r\n  int1280m_T re;\r\n  int1280m_T im;\r\n} cint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[20];\r\n} uint1280m_T;\r\n\r\ntypedef struct {\r\n  uint1280m_T re;\r\n  uint1280m_T im;\r\n} cuint1280m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} int1344m_T;\r\n\r\ntypedef struct {\r\n  int1344m_T re;\r\n  int1344m_T im;\r\n} cint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[21];\r\n} uint1344m_T;\r\n\r\ntypedef struct {\r\n  uint1344m_T re;\r\n  uint1344m_T im;\r\n} cuint1344m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} int1408m_T;\r\n\r\ntypedef struct {\r\n  int1408m_T re;\r\n  int1408m_T im;\r\n} cint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[22];\r\n} uint1408m_T;\r\n\r\ntypedef struct {\r\n  uint1408m_T re;\r\n  uint1408m_T im;\r\n} cuint1408m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} int1472m_T;\r\n\r\ntypedef struct {\r\n  int1472m_T re;\r\n  int1472m_T im;\r\n} cint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[23];\r\n} uint1472m_T;\r\n\r\ntypedef struct {\r\n  uint1472m_T re;\r\n  uint1472m_T im;\r\n} cuint1472m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} int1536m_T;\r\n\r\ntypedef struct {\r\n  int1536m_T re;\r\n  int1536m_T im;\r\n} cint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[24];\r\n} uint1536m_T;\r\n\r\ntypedef struct {\r\n  uint1536m_T re;\r\n  uint1536m_T im;\r\n} cuint1536m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} int1600m_T;\r\n\r\ntypedef struct {\r\n  int1600m_T re;\r\n  int1600m_T im;\r\n} cint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[25];\r\n} uint1600m_T;\r\n\r\ntypedef struct {\r\n  uint1600m_T re;\r\n  uint1600m_T im;\r\n} cuint1600m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} int1664m_T;\r\n\r\ntypedef struct {\r\n  int1664m_T re;\r\n  int1664m_T im;\r\n} cint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[26];\r\n} uint1664m_T;\r\n\r\ntypedef struct {\r\n  uint1664m_T re;\r\n  uint1664m_T im;\r\n} cuint1664m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} int1728m_T;\r\n\r\ntypedef struct {\r\n  int1728m_T re;\r\n  int1728m_T im;\r\n} cint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[27];\r\n} uint1728m_T;\r\n\r\ntypedef struct {\r\n  uint1728m_T re;\r\n  uint1728m_T im;\r\n} cuint1728m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} int1792m_T;\r\n\r\ntypedef struct {\r\n  int1792m_T re;\r\n  int1792m_T im;\r\n} cint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[28];\r\n} uint1792m_T;\r\n\r\ntypedef struct {\r\n  uint1792m_T re;\r\n  uint1792m_T im;\r\n} cuint1792m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} int1856m_T;\r\n\r\ntypedef struct {\r\n  int1856m_T re;\r\n  int1856m_T im;\r\n} cint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[29];\r\n} uint1856m_T;\r\n\r\ntypedef struct {\r\n  uint1856m_T re;\r\n  uint1856m_T im;\r\n} cuint1856m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} int1920m_T;\r\n\r\ntypedef struct {\r\n  int1920m_T re;\r\n  int1920m_T im;\r\n} cint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[30];\r\n} uint1920m_T;\r\n\r\ntypedef struct {\r\n  uint1920m_T re;\r\n  uint1920m_T im;\r\n} cuint1920m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} int1984m_T;\r\n\r\ntypedef struct {\r\n  int1984m_T re;\r\n  int1984m_T im;\r\n} cint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[31];\r\n} uint1984m_T;\r\n\r\ntypedef struct {\r\n  uint1984m_T re;\r\n  uint1984m_T im;\r\n} cuint1984m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} int2048m_T;\r\n\r\ntypedef struct {\r\n  int2048m_T re;\r\n  int2048m_T im;\r\n} cint2048m_T;\r\n\r\ntypedef struct {\r\n  uint64_T chunks[32];\r\n} uint2048m_T;\r\n\r\ntypedef struct {\r\n  uint2048m_T re;\r\n  uint2048m_T im;\r\n} cuint2048m_T;\r\n\r\n#endif                                 /* MULTIWORD_TYPES_H */\r\n"},{"name":"rtwtypes.h","type":"header","group":"utility","path":"C:\\Users\\Artis\\Desktop\\Ladybug\\Simulink\\V4 calib controller\\quadcopter_sim_grt_rtw","tag":"","groupDisplay":"Utility files","code":"/*\r\n * rtwtypes.h\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"quadcopter_sim\".\r\n *\r\n * Model version              : 2.35\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Fri May 19 10:25:36 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTWTYPES_H\r\n#define RTWTYPES_H\r\n#include \"tmwtypes.h\"\r\n#ifndef POINTER_T\r\n#define POINTER_T\r\n\r\ntypedef void * pointer_T;\r\n\r\n#endif\r\n\r\n/* Logical type definitions */\r\n#if (!defined(__cplusplus))\r\n#ifndef false\r\n#define false                          (0U)\r\n#endif\r\n\r\n#ifndef true\r\n#define true                           (1U)\r\n#endif\r\n#endif\r\n\r\n#ifndef INT64_T\r\n#define INT64_T\r\n\r\ntypedef long long int64_T;\r\n\r\n#define MAX_int64_T                    ((int64_T)(9223372036854775807LL))\r\n#define MIN_int64_T                    ((int64_T)(-9223372036854775807LL-1LL))\r\n#endif\r\n\r\n#ifndef UINT64_T\r\n#define UINT64_T\r\n\r\ntypedef unsigned long long uint64_T;\r\n\r\n#define MAX_uint64_T                   ((uint64_T)(0xFFFFFFFFFFFFFFFFULL))\r\n#endif\r\n\r\n/*===========================================================================*\r\n * Additional complex number type definitions                                           *\r\n *===========================================================================*/\r\n#ifndef CINT64_T\r\n#define CINT64_T\r\n\r\ntypedef struct {\r\n  int64_T re;\r\n  int64_T im;\r\n} cint64_T;\r\n\r\n#endif\r\n\r\n#ifndef CUINT64_T\r\n#define CUINT64_T\r\n\r\ntypedef struct {\r\n  uint64_T re;\r\n  uint64_T im;\r\n} cuint64_T;\r\n\r\n#endif\r\n#endif                                 /* RTWTYPES_H */\r\n"},{"name":"rtmodel.h","type":"header","group":"interface","path":"C:\\Users\\Artis\\Desktop\\Ladybug\\Simulink\\V4 calib controller\\quadcopter_sim_grt_rtw","tag":"","groupDisplay":"Interface files","code":"/*\r\n *  rtmodel.h:\r\n *\r\n * Academic License - for use in teaching, academic research, and meeting\r\n * course requirements at degree granting institutions only.  Not for\r\n * government, commercial, or other organizational use.\r\n *\r\n * Code generation for model \"quadcopter_sim\".\r\n *\r\n * Model version              : 2.35\r\n * Simulink Coder version : 9.9 (R2023a) 19-Nov-2022\r\n * C source code generated on : Fri May 19 10:25:36 2023\r\n *\r\n * Target selection: grt.tlc\r\n * Note: GRT includes extra infrastructure and instrumentation for prototyping\r\n * Embedded hardware selection: Intel->x86-64 (Windows64)\r\n * Code generation objective: Execution efficiency\r\n * Validation result: Not run\r\n */\r\n\r\n#ifndef RTW_HEADER_rtmodel_h_\r\n#define RTW_HEADER_rtmodel_h_\r\n#include \"quadcopter_sim.h\"\r\n#define GRTINTERFACE                   0\r\n#endif                                 /* RTW_HEADER_rtmodel_h_ */\r\n"}],"features":{"annotation":false,"coverage":true,"profiling":true,"tooltip":true,"coverageTooltip":true,"showJustificationLinks":true,"useMWTable":false,"showProfilingInfo":true,"showTaskSummary":true}};